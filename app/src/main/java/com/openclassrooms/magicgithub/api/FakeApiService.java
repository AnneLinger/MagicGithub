package com.openclassrooms.magicgithub.api;

import com.openclassrooms.magicgithub.model.User;
import com.openclassrooms.magicgithub.ui.user_list.ListUserViewHolder;

import java.util.Arrays;
import java.util.List;
import java.util.Random;

import static com.openclassrooms.magicgithub.api.FakeApiServiceGenerator.FAKE_USERS;
import static com.openclassrooms.magicgithub.api.FakeApiServiceGenerator.FAKE_USERS_RANDOM;
import static com.openclassrooms.magicgithub.api.FakeApiServiceGenerator.generateUsers;

import android.view.View;

public class FakeApiService implements ApiService {

    private List<User> users = generateUsers();

    /**
     * Return a list of {@link User}
     * Those users must be generated by {@link FakeApiServiceGenerator}
     */
    @Override
    public List<User> getUsers() {
        // TODO: A modifier
        /** return car la méthode doit retourner la liste, users car la liste FAKE_USERS y a été stockée en début de fichier
         *
         */
        return users;

        // ESSAIS :
        // return FAKE_USERS; Méthode créée initialement, lance l'app mais empêche les modifications sur la liste users
    }

    /**
     * Generate a random {@link User} and add it {@link FakeApiService#users} list.
     * This user must be get from the {@link FakeApiServiceGenerator#FAKE_USERS_RANDOM} list.
     */
    @Override
    public void generateRandomUser() {
        // TODO: A modifier
        /** 1. Initialisation d'un objet randomUser de type User pour récupérer le random dans la liste FAKE_USERS_RANDOM
         *     Récupération dans cette liste avec get() qui prend pour paramètre la méthode nextInt appliquée à un objet random
         *     La méthode nextInt récupère alors un index aléatoire dans FAKE_USERS_RANDOM en tenant compte de la plage d'index possibles (.size)
         *  2. Ajout de l'objet randomUser récupéré à la liste users
         */
        // Random random = new Random(); Initialisation non nécessaire ??!!
        User randomUser = FAKE_USERS_RANDOM.get(new Random().nextInt(FAKE_USERS_RANDOM.size()));
        users.add(randomUser);

        // Random avec boucle pour éviter la répétition de user
        /**while (FAKE_USERS_RANDOM.size()>0) {
            User randomUser = FAKE_USERS_RANDOM.get(new Random().nextInt(FAKE_USERS_RANDOM.size()));
            users.add(randomUser);
            FAKE_USERS_RANDOM.remove(randomUser);
        }*/
        /**if(FAKE_USERS_RANDOM.size()>0){
            User randomUser = FAKE_USERS_RANDOM.get(new Random().nextInt(FAKE_USERS_RANDOM.size()));
            users.add(randomUser);
            User randomUserToDelete = randomUser;
            FAKE_USERS_RANDOM.remove(randomUserToDelete);
        }
        else{
            System.out.println("Il n'y a plus d'utilisateur aléatoire à générer");
        }*/
    }

        // ESSAI CONCLUANT AVEC UN USER SPECIFIQUE :
        // User userToAdd = FAKE_USERS_RANDOM.get(1);
        //users.add(userToAdd);

        // ESSAIS AVEC UN USER SPECIFIQUE :
        // FAKE_USERS_RANDOM.get(1);
        // FakeApiServiceGenerator.FAKE_USERS.add(FakeApiServiceGenerator.FAKE_USERS_RANDOM.get(0));
        // users.addAll(FAKE_USERS_RANDOM);
        // generateUsers().addAll(FAKE_USERS_RANDOM);
        // users.add(FAKE_USERS_RANDOM.get(1)); NE FAIT RIEN
        // getUsers().add(FAKE_USERS_RANDOM.get(1)); FAIT PLANTER L'APP


    /**
     * Delete a {@link User} from the {@link FakeApiService#users} list.
     */
    @Override
    public void deleteUser(User user) {
        // TODO: A modifier
        /**Méthode remove invoquée sur la liste générée dans le fichiers avec pour paramètre le paramètre de deleteUser (=user à delete)
         *
         */
        users.remove(user);

        // ESSAIS :
        // getUsers().remove(user);
        // users.remove(user.re)
        // FAKE_USERS.remove(User.id);
        // FAKE_USERS.remove(users.remove(user));
        // user = FAKE_USERS.remove(user);
        // String userId = user.getId();
        // users.remove(users.get(userId.to));
        // users.remove(user);
        // this.users.remove(user);
        // FakeApiService.this.users.remove(user);
        // getUsers().remove(user.getId());
        // FAKE_USERS.remove(user.getId());
        //users.remove(user.getId()+user.getAvatarUrl()+user.getLogin());
        // boolean userDelete = users.remove(user);
        // getUsers().remove(user.getId());
        // FakeApiService.this.getUsers().remove(user); SUPPRIME TOUTE LA LISTE
        // FakeApiService.this.getUsers().remove(user.getId()); NE FAIT RIEN
        // FakeApiService.this.getUsers().remove(user.id);
        // users.remove(user.getId());
        // users.remove(users.get(user.hashCode()));
        // getUsers().remove(user.hashCode());
        // users.get(user.hashCode());
        // generateUsers().remove(user.hashCode());

    }
}
